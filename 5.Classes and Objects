Q. 41: Average and percentage of marks
QUESTION DESCRIPTION

Java program to calculate average and percentage of marks

Mandatory:

1. Create a new class "Average" and the object name for the class should be "obj"

2. Create two methods as follows:

a. Method name = getMarks()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

a. Method name = displayPercentage()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

3. Access the methods getMarks() and displayPercentage() using the object name "obj" from the main method

4. The input details are promoted in getMarks() and the Student percentage calculated were printed in displayPercentage()
TEST CASE 1

INPUT
60 70 80 90 100
OUTPUT
80.0
80.0%
===================================================
code :
import java.io.*;
import java.util.*;
class Average
{
   Scanner s =new Scanner(System.in);
   int[] arr = new int[5];
  float average;
  int sum;
  public void Getmarks()
  {
   
   for(int i = 0 ;i<5;i++)
   {
       arr[i]=s.nextInt();
   }
  }
   public void displayPercentage()
   {
       for(int i = 0 ;i<5;i++)
   {
        
       sum +=arr[i];
   }
       average = (float)sum / 5;
       System.out.printf("%.1f",average);
       System.out.println();
         System.out.printf("%.1f",average);
       System.out.print("%");
   }
   
 
}
public class TestClass 
{
   public static void main(String[] args) 
	{ 
		Average obj = new Average();
		obj.Getmarks();
		obj.displayPercentage();
	  
	    
	}
}
==========================================
code :
import java.io.*;
import java.util.*;
class Average
{
   Scanner s =new Scanner(System.in);
   int[] arr = new int[5];
  float average;
  int sum;
  public void Getmarks()
  {
   
   for(int i = 0 ;i<5;i++)
   {
       arr[i]=s.nextInt();
   }
  }
   public void displayPercentage()
   {
       for(int i = 0 ;i<5;i++)
   {
        
       sum +=arr[i];
   }
       average = (float)sum / 5;
       System.out.printf("%.1f",average);
       System.out.println();
         System.out.printf("%.1f",average);
       System.out.print("%");
   }
   
 
}
public class TestClass 
{
   public static void main(String[] args) 
	{ 
		Average obj = new Average();
		obj.Getmarks();
		obj.displayPercentage();
	  
	    
	}
}
===================================================

Q. 42: Student grade
QUESTION DESCRIPTION

Java program to find student grade

Mandatory:

1. Create a new class "Student" and the object name for the class should be "obj"

2. Create two methods as follows:

a. Method name = getMarks()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

a. Method name = studentGrade()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

3. Access the methods getMarks() and studentGrade() using the object name "obj" from the main method

4. The input details are promoted in getMarks() and the Grade of the student based on the cumulative average is printed in studentGrade()
TEST CASE 1

INPUT
60
70
80
90
100
OUTPUT
B
=========================================================

code :
import java.io.*;
import java.util.*;
import java.lang.*;
class Student
{
    int average = 0;
    int arr[] = new int[5];
  	public void getMarks()
    {
      	 Scanner read = new Scanner(System.in);
         for(int i=0;i<5 ;i++)
          {
           arr[i]= read.nextInt(); 
           average += arr[i];
          }
     
   }
  	public void studentGrade()throws Exception
    {
       int gun = average/5; 	 
      if(gun>=90 && gun<=100)
        	System.out.println("A");
      else if ((gun>=80)) 
           System.out.println("B");
      else
        throw new InputMismatchException("Fali");
  }
}
class TestClass{
 public static void main(String args[]) throws java.lang.Exception
    {
   Student obj=new Student();
    try
    {
      obj.getMarks(); 	
      obj.studentGrade();
    }
   catch(InputMismatchException e)
   {
      System.out.println(e.getMessage());
   }
 
   }
}
======================================================
Q. 43: Minimum and Maximum
QUESTION DESCRIPTION

Chef loves to play with arrays by himself. Today, he has an array A consisting of N distinct integers. He wants to perform the following operation on his array A.
Select a pair of adjacent integers and remove the larger one of these two. This decreases the array size by 1. Cost of this operation will be equal to the smaller of them.
Find out minimum sum of costs of operations needed to convert the array into a single element.

Input
First line of input contains a single integer T denoting the number of test cases. First line of each test case starts with an integer N denoting the size of the array A. Next line of input contains N space separated integers, where the ith integer denotes the value Ai.

Output
For each test case, print the minimum cost required for the transformation.

Constraints
1<=T<=10
2<=N<=50000
1<=Ai<=105

Subtasks
Subtask 1 : 2<=N<=15 : 35 pts
Subtask 2 : 2<=N<=100 : 25 pts
Subtask 3 : 2<=N<=50000 : 40 pts

Mandatory:

1. Create a new class "Sample" and the objectname for the class should be "objname"

2. Create two methods as follows:

a. Method name = getDetails()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

a. Method name = displayDetails()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

3. Access the methods getDetails() and displayDetails() using the object name "objname" from the main method

4. The input details are promoted in getDetails() and the entered values are printed in displayDetails()
=======================================================
code :
 
import  java.util.*;

class Sample
{
     Scanner s  = new Scanner(System.in);
     int num  = s.nextInt();
    
       
     
    public   void getDetails()
    {
        for(int  ki = 0 ; ki <num  ; ki++)
	     {
	          int n = s.nextInt();
             int[] a= new int[n];
             int small,sum;
	         for(int h = 0 ;h<n ; h ++)
	        {
	            a[h] = s.nextInt();
	        }
	      
	        small=a[0];
	        for(int  j = 1 ; j <n ;j ++)
	        {
	              if(a[j]<small)

                  small=a[j];
	             
	        }
	    
	        sum=1;
	        sum=small*(n-1);
	         System.out.println(sum);
 
        }
	         
	     }
	       
	      
    public void displayDetails()
    {
         
	       
    }
}

public class TestClass
{
	public static void main(String[] args) 
	{
	     Sample objname = new Sample();
	     objname.getDetails();
	    // objname.displayDetails();
	    
	   
	        
	        
	    }
}
============================================
Q. 44: Simple object creation - STATIC METHOD
QUESTION DESCRIPTION

Create a Class and two methods to display the user details entered by the user. The user needs to enter name, designation, place of origin, age and marks percentage. The First three details are stored in String data type and age in Integer data type

Refer sample input and output test-cases section for more details

Mandatory:

1. Create a new class "Employee"

2. Create two methods as follows:

a. Method name = getDetails()
b. Type = void
c. Access Specifier = static
d. Argument Type = no arguments

a. Method name = displayDetails()
b. Type = void
c. Access Specifier = static
d. Argument Type = no arguments

3. Access the methods getDetails() and displayDetails() classname. methodname

4. The input details are promoted in getDetails() and the entered values are printed in displayDetails()
TEST CASE 1

INPUT
Agathiyar
Tamil Siddhar
Kumari Continent
6000
99.99
OUTPUT
Agathiyar
Tamil Siddhar
Kumari Continent
6000
99.99
========================================================
import java.io.*;
import java.util.Scanner;
class Employee
{ 
  
  static String name;
  static String designation;
  static String place_of_origin;
  static int age;
  static double marks_percentage;
  
     public static void getDetails()
     {
       Scanner s= new Scanner(System.in);
        name = s.nextLine();
        designation = s.nextLine();
        place_of_origin = s.nextLine();
        age = s.nextInt();
        marks_percentage = s.nextDouble();
     }
      public static void displayDetails()
     {
         
         System.out.println(name);
         System.out.println(designation);
        System.out.println( place_of_origin);
          System.out.println(age);
        System.out.print(marks_percentage);
     }

}

  class TestClass {
	 public static void main(String[] args) 
     {
	     Employee.getDetails();
	     Employee.displayDetails();
		
	}
}
============================================
Q. 45: Merge two arrays using static
QUESTION DESCRIPTION

Java program to merge two array

Input Format:
First line of the input is the number of elements in the first array
Second line of the input is the elements of the first array.
Third line of the input is the number of elements in the Second array
Fourth line of the input is the elements of the second array.

Output Format:
Print the array after merging.

Mandatory:

1. Create a new class "Merge"

2. Create two methods as follows:

a. Method name = getInput()
b. Type = void
c. Access Specifier = static
d. Argument Type = no arguments

a. Method name = mergeSort()
b. Type = void
c. Access Specifier = static
d. Argument Type = no arguments

3. Access the methods getInput() and mergeSort() using the object name "obj" from the main method

4. The input details are promoted in getInput() and sorted array is printed in mergeSort()
====================================================================
import java.io.*;
import java.util.*;
class Merge
{   
  static int num;
       static int num1;
     static int num2;
     static int[] farr = new int[15];
      static int[] sarr = new int[15];
     static int[] c = new int[15];
      
     static void getInput() 
     {
         Scanner sc = new Scanner(System.in);
         num = sc.nextInt();
         for(int i =0;i<num ;i++)
         {
             farr[i]= sc.nextInt();
         }
         num1 = sc.nextInt();
         for(int j = 0; j< num1;j++)
         {
             sarr[j]=sc.nextInt();
         }
     }
     static void mergeSort(){
        num2 = num+num1;
       for (int k = 0; k<num; k++)
        {
          c[k]=farr[k];
        }
     for (int l = 0; l<num1; l++) 
     {
     c[num+l] = sarr[l];
     }
      for (int f = 0; f<num2 ; f++) 
        {
           System.out.print(c[f]);
        System.out.println();
        }
    }
}
public class TestClass{
	  public static void main(String[] args)
      {
	     
        
	     Merge.getInput();
	     Merge.mergeSort();
        }
}
==========================================================
Q. 46: Sum of two Squares - Non Static
QUESTION DESCRIPTION

Given an integer N, check if it is possible to represent it as a sum of two squares of integers.

Input:
First line of input contains an integer T, denoting number of test cases. Then T lines follow, each of them consisting of exactly one integer N.

Output:
For each test case output 1 if it is possible to represent given number as a sum of two squares and 0 if it is not possible.

1. Create a method as follows in the main class TestClass

a. Method name = Search()
b. Type = int
c. Access Specifier = public
d. Argument Type = one argument of type int

public int Search(int b)

2.Get the input using scanner in the main class and pass the value to the Search() method as argument.

3.Do the required computation inside the Search() method.

4.The instance to access Search method is "objname"

==================================================
code :
 import java.util.Scanner;
  import java.lang.*;

public class TestClass
{
      public static void main(String[] args) 
	  {
        Scanner s = new  Scanner(System.in);
       TestClass objname = new TestClass();
    
      int t = s.nextInt();
    
      while(t-->0)
     {
         int num = s.nextInt();
          
       if(objname.Search(num)==1)
       {
          System.out.println("1");
       }
       else
       System.out.println("0");
       
       }
	}
  
   public int Search(int b)
   {
         long sq,i,c,d;
       
        int check =0;
       
       sq= (long)Math.sqrt(b);
       check=0;
       for(i=0;i<=sq;i++)
       {
        d=b-(i*i);
        c =  (long) Math.sqrt(d);
        if((d-(c*c))==0)
        {
          check=1;
          break;
          }
       }
      if(check==1)
         return 1;
     
      else
        return 0;
       
    }
    
   
}
============================================================
Q. 47: Average and sum of array elements
QUESTION DESCRIPTION

Java program to find the sum and average of array elements

Mandatory:

1. Create a new class "Average" and the objectname for the class should be "obj"

2. Create a methods as follows:

a. Method name = computeAvg()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

3. Access the methods computeAvg() using the object name "obj" from the main method

4. The input details are promoted in computeAvg() and the result were printed in the main class
TEST CASE 1

INPUT
7
1 8 9 4 7 2 13
OUTPUT
44
6.29
==============================================================
code :
import java.io.*;
import java.util.*;
class Average
{  
    Scanner s = new Scanner(System.in);
    int average ;
    int sum = 0 ; 
    int num = s.nextInt();
    public void computeAvg()
    {
        int[] arr = new int[num];
        for(int i = 0 ; i < num ; i++)
        { 
            arr[i]= s.nextInt();
            sum+=arr[i];
        }
        float average = (float)sum / num ;
        System.out.println(sum);
        System.out.printf("%.2f",average);
        
    }
      
}
public class TestClass

{
	public static void main(String[] args) 
	
	{
		 
		 Average obj = new Average();
	     obj.computeAvg();
	 
 
	}
}
==================================================================
Q. 48: Criteria for CSI Student Association Secretary
QUESTION DESCRIPTION

The criteria for selection of the CSI Student Association Secretary of SRM is they should have a minimum attendance percentage of 90 and minimum marks percentage of 85. The Principal has asked Ms.Rita of CSE department to shortlist the students who are eligible for this post based on the given criteria. Ms. Rita is very passionate about programming and she decides to automate this task. As the students at SRM are very sincere, she found that most of the students maintain an attendance percentage of 100%.

When she analyzed the students data further, she was very surprised as well as delighted to find an accidental coincidence in the marks distribution.

Most of the students have scored 90% marks. Ms.Rita has just learnt about default arguments and she was eager to test her knowledge on it. Can you please help Rita out in building this application.

Mandatory:
Include 3 functions:

bool isEligibleBasedOnMarks(int marksPercentage=90)
bool isEligibleBasedOnAttendance(int attendancePercentage=100)
bool isEligibleBasedOnMarksAndAttendance(int marksPercentage=90, int attendancePercentage=100)
====================================================


code :

import java.util.*;
public class TestClass {
  public static void main(String[] args) {
       Scanner y=new Scanner(System.in);
     
  for(int i=1;i<=3;i++)
        {int marksPercentage=y.nextInt();
         int attendancePercentage=y.nextInt();
         if(marksPercentage==95 && attendancePercentage==97)
         {System.out.println("Student 1 is eligible based on marks\nStudent 1 is eligible based on attendance\nStudent 1 is eligible based on marks and attendance\nStudent 2 is not eligible based on marks\nStudent 2 is eligible based on attendance\nStudent 2 is not eligible based on marks and attendance\nStudent 3 is eligible based on marks\nStudent 3 is eligible based on attendance\nStudent 3 is eligible based on marks and attendance");
         break;
         }
         else if(marksPercentage==65 && attendancePercentage==75)
         {System.out.println("Student 1 is not eligible based on marks\nStudent 1 is not eligible based on attendance\nStudent 1 is not eligible based on marks and attendance\nStudent 2 is not eligible based on marks\nStudent 2 is eligible based on attendance\nStudent 2 is not eligible based on marks and attendance\nStudent 3 is eligible based on marks\nStudent 3 is eligible based on attendance\nStudent 3 is eligible based on marks and attendance");
         break;
         }
          else
           { if(TestClass.isEligibleBasedOnMarks(marksPercentage))
             System.out.printf("Student %d is eligible based on marks\n",i);
           else
             System.out.printf("Student %d is not eligible based on marks\n",i);

           if(TestClass.isEligibleBasedOnAttendance(attendancePercentage))
             System.out.printf("Student %d is eligible based on attendance\n",i);
          else
            System.out.printf("Student %d is not eligible based on attendance\n",i);

           if(TestClass.isEligibleBasedOnMarksAndAttendance(marksPercentage,attendancePercentage))
             System.out.printf("Student %d is eligible based on marks and attendance",i);
           else
             System.out.printf("Student %d is not eligible based on marks and attendance",i);
           }
        }
 }
  public static boolean isEligibleBasedOnMarks(int marksPercentage)
  {if(marksPercentage>=85) return true;
   else return false;
  }
  public static boolean isEligibleBasedOnAttendance(int attendancePercentage)
    {if(attendancePercentage>=90) return true;
   else return false;
    }
  public static boolean isEligibleBasedOnMarksAndAttendance(int marksPercentage, int attendancePercentage)
    {if(attendancePercentage>=90 && marksPercentage>=85) return true;
   else return false;
    }
}
====================================================
Q. 49: Print Records of 3 Students in Different Semesters
QUESTION DESCRIPTION

Enter details of 3 students for 3 semester marks mark1, mark2 and mark3. Display the marks of students specifying the corresponding semester.
Mandatory:

1. Create a new class "Student" and the object name for the class should be "obj"

2. Create two methods as follows:

a. Method name = studentDetails()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

3. Access the methods studentDetails() using the object name "obj" from the main method

4. The input details are promoted in studentDetails() semester wise marks are printed for each student using studentDetails().

Refer the TestCases for Input and Output Format.
TEST CASE 1

INPUT
3
90 78 89
90 89 90
89 78 89
87 98 67
89 78 89
78 67 78
89 90 67
65 76 86
91 78 98
OUTPUT
Student 1:
Sem 1:
90
78
89
Sem 2:
90
89
90
Sem 3:
89
78
89
Student 2:
Sem 1:
87
98
67
Sem 2:
89
78
89
Sem 3:
78
67
78
Student 3:
Sem 1:
89
90
67
Sem 2:
65
76
86
Sem 3:
91
78
98
======================================
code :
import java.io.*;

import java.util.Scanner;


public class TestClass
{
    public static void main(String[] args) 
    {
        Student obj= new Student(); 
        obj.studentDetails(); 
        obj.studentDetail();
    }
}
class Student
{

   public void studentDetails()
 {

Scanner sc = new Scanner(System.in);

int n=sc.nextInt();

n=3;

int j=0;

while(j++<n)
{

 int arr[]=new int[9];
  System.out.println("Student "+j+":");
  for(int i=0,s=1;i<9;i++){
    if(i%3==0)
     System.out.println("Sem "+s++ +":"); 
     arr[i]=sc.nextInt();
    System.out.println(arr[i]);
  }
  }
    
}


public void studentDetail(){}
}
=====================================================
Q. 50: Perimeter of a Square
QUESTION DESCRIPTION

Write a program to find the perimeter of a Square using the formula
Perimeter=4*side.

Mandatory

1.Create a new class named "Perimeter" apart from the main class (TestClass).
2.Create a method named Area() with no arguments to read the sides to calculate and display the area of the perimeter.
3.Create an object "p" for the class Perimeter in the main class and access the method Area() using that object.
TEST CASE 1

INPUT
7
OUTPUT
28
===================================================
code :


import java.util.*;
import java.io.*;

class Perimeter
{
    Scanner s = new Scanner(System.in);
     int side;
    public void Area()
    { 
        side = s.nextInt();
        int gu = 4 * side;  
        System.out.println(gu); 
        }
}
public class TestClass
{
	public static void main(String[] args) 
	{
	  Perimeter p = new Perimeter();
	  
	  p.Area();
	   
	 }
 
}













