Q. 51: Equal or Unequal
QUESTION DESCRIPTION

Override equals method to compare two complex numbers are equal or not.
Input Format : two complex numbers
Output Format : print "Equal" if they are equal otherwise "Not Equal".

Mandatory:

1.Create a Class named "Complex"
2.Then create a method with the following details to get real and imaginary part of the complex number.

Method name = Complex
Arguments = Two arguments of type double
Access specifier - public

public Complex(double re, double im)

Method name = equals
Arguments = One argument (Instance variable "o" of type Object)
Return type - boolean
Access specifier - public

public boolean equals(Object o)

3.Override the method equals to compare two complex objects
Conditions to check inside the equals method
If the variable "o" is an instance of itself and return true
if the variable "o" is a instance of complex or null return false

4.Typecast "o" to compare two data members
Complex c = (Complex) o;

5.Compare the data members and return accordingly
return Double.compare(re, c.re) == 0 && Double.compare(im, c.im) == 0;

6. Get four inputs from the user in the main method with variable names as "a" , "b", "x" and "y" of type integer

7. Create two object named c1 and c2 for the class Complex from the main method of the main class(TestClass) to get two complex numbers.

8.Then compare two complex numbers.If it is equal then print "Equal" else print "Not Equal"


=====================================================

code :

import java.util.*;
public class TestClass{
public static void main(String[] args) {
Scanner in = new Scanner(System.in);
int a,b,x,y;
a=in.nextInt();
b=in.nextInt();
x=in.nextInt();
y=in.nextInt();
Complex c1,c2;

c1=new Complex(a,b);
c2=new Complex(x,y);

if(c1.equals(c2))

System.out.print("Equal");

else

System.out.print("Not Equal");

 

}
}
class Complex {

double re,im;

public Complex(double re, double im){

this.re=re;

this.im=im;
}
public boolean equals(Object o){

Complex c = (Complex) o;

return Double.compare(re, c.re) == 0 && Double.compare(im, c.im) == 0; 
}
}


=======================================================================

Q. 52: FrontBack
QUESTION DESCRIPTION

Given 2 integer a and b, return true if one of them is 10 or if their sum is 10.

Mandatory:

1. Create a class "Sample" and a method named "public void getNumbers()" with no arguments . This is used only to get two integer numbers

2. Create an another method inside "Sample" class titled as makes10() with two arguments and the type of the method is boolean

3 Print the final answer in the main method under main class (TestClass) as follows:

boolean output=objectname.makes10()
System.out.println(output)

===============================================

code :

import java.util.*;
import java.io.*;
class Sample
{ 
  Scanner s = new Scanner(System.in);
    int a  , b ;
  public void getNumbers()
  {
    a =s.nextInt();
    b = s.nextInt();    
  }
   public boolean  makes10()
   {
       int sum = a+b;
       if(a==10 || b ==10 || sum==10)
       {
           System.out.println(true);
       }
       else 
       System.out.println(false);
       return false;
   }
    
}

public class TestClass
{
	public static void main(String[] args) 
	{
		 Sample s = new Sample();
		 s.getNumbers();
		 s.makes10();
	}
}

=================================================

Q. 53: Chef and Keyboard
QUESTION DESCRIPTION

Chef is a well known programmer. He owns a brand new Android phone of screen size of dimension n m (n denotes the height of the phone and m denotes the width). Chef wants to design a program for painting the screen. He figured out c colors, which he will use to paint the screen. He wants to paint some rectangular section of pixels of the screen each with different color. Also Chef would like to use all of his c colors in painting.

Can you help Chef in finding number of different dimensions of rectangular section he can paint? In other words, find number of pairs x, y such that Chef can paint a rectangular section of dimension x y (x denotes height, y denotes width) on the screen. Please note that Chef uses a fix orientation of his phone and is not allowed to rotate it, i.e. height always stays n and width always stays m and not the other way around.

Input
First line of the input contains an integer T denoting the number of test cases. T test cases follow.
Only line of each test case contains three space separated integers n, m, c.

Output
For each test case, output a single line containing the answer for the test case.

Mandatory:

1. Create a class and a method named "public void keyboard" with takes no arguments and the method type is void

Methodname = keyboard
Argument = None
Access Specifier = public
Return Type = void

2. Access the method "public void keyboard()" from the main method and the instance name for access the keyboard method is "objname"

objname.keyboard()
=======================================================

code :

import java.util.Scanner;
public class TestClass {
	 public static void main(String[] args) { 
		Keyboard objname = new Keyboard();
       objname.keyboard();
	}
}
class Keyboard
{
  public void keyboard()
  {
    Scanner scan = new Scanner(System.in);
    int T = scan.nextInt();
    for(int j=0; j<T; j++)
    {
      int n = scan.nextInt();
      int m = scan.nextInt();
      int c = scan.nextInt();
      
      int count = 0,n1=0,m1=0;
 
      if (n*m <c ) 
            System.out.println("0");	   
      else if (n*m == c ) 
            System.out.println("1");
	  else 
      {
            for (int i = 1; i<=c; i++) 
            {
               if (c%i == 0) 
               {
                  n1 = i;
                  m1 = c/i;                               
                  if (n1 <= n && m1 <= m)
                    count++;                           
               }
               if (i > n && i > m) 
                 break;
            }
            System.out.println(count);
      }
  }
}
}
=========================================================
Q. 54: Average
QUESTION DESCRIPTION

Design a class Average with a method findAverage() which computes average of 3 numbers

Mandatory:

1. Create a class "Average" with two static methods and four static variables "static int num1,num2,num3,total"

2. Method 1

a. Method Name = getInput()
b.Access Specifier = static
c. Argument = No Arguments
d. Method Return type = void
e. Usage = To get the three numbers and call findAverage() method

3. Method 2

a. Method Name = findAverage()
b.Access Specifier = static
c. Argument = No argument
d. Method Return type = void

4. Access the method getInput() under class "Average" from the main method using classname.methodname

5. Access the method findAverage() from the getInput() method

Note: Do not access findAverage() from the main method, it needs to be accessed only from getInput() .

===================================================

code :

import java.util.*;
import java.io.*;
class Average
{  static int a,b,c ,total;
    public static void getInput()
   { 
    Scanner input = new Scanner(System.in);
    
      a = input.nextInt();
      b = input.nextInt();
      c = input.nextInt();
    Average.findAverage();
      
  }
     public static void findAverage()
   {
      
      int ave;
      total = a+b+c;
      ave = (total)/3;
      System.out.println(ave);
        
   }
    
}

public class TestClass
{
	public static void main(String[] args) 
	{
		 Average s = new Average();
		 Average.getInput();
	 
	}
}

==========================================================

Q. 55: Summing pairs
QUESTION DESCRIPTION

Write a java program to find all pairs of elements in the given array whose sum is equal to a given number.

For example, if {4, 5, 7, 11, 9, 13, 8, 12} is an array and 20 is the given number, then you have to find all pairs of elements in this array whose sum must be 20.

In this example (7, 13), (11,9) and (8, 12) are such pairs whose sum is 20

Testcases:

1. The First Line denotes the number of inputs
2. The Second Lines denotes the input elements
3. The third line is the number and find all pair elements whose sum is equal to the given number

Mandatory:

1. Create a new class called "Sample" and a method as follows:

a. Method name = findThe Pairs()
b. Type = void
c. Access Specifiers = static

2. Access the findThePairs() from the main method as classname.methodname() (The class name is Sample)

======================================


code :

import java.util.*;

public class TestClass 
{
    public static void main(String[] args)
    {
        Sample.findThePairs();
 } 
}
class Sample 
{ 
    public static void findThePairs(){

Scanner in = new Scanner(System.in);
int x = in.nextInt(); 
int[] v = new int[x]; 

for(int u=0;  u<x;  u++)
{
v[u]=in.nextInt();
}
int w= in.nextInt();
for(int i=0;i<x;i++)
{

      for(int j=i+1; j<x ; j++)
      {
             if(v[i]+v[j]==w)
        {
         System.out.println(v[i]+"+"+v[j]+"="+w);
        }
    
   }
}
}
}
=======================================================

Q. 56: Finding Binary values
QUESTION DESCRIPTION

Write a java program to check whether given number is binary or not.A binary number is a number which contains only 0 or 1. For example : 101101, 110010110, 10010011 are binary numbers.

Mandatory:

Use the following conditions in the program:

1. Create a static method "isBinaryOrNot" in the main class itself (TestClass) of type void that takes one argument of integer type

Method name = isBinaryOrNot
Argument = One - int number
Access Specifier = static
Method return type = void

Method Definition:
static void isBinaryOrNot(int number) - Static Method with one integer argument with variable name "number"

2. Get the input in the main method and call the method as follows:
isBinaryOrNot(num) with variable name "num" of type integer

============================================

code :

import java.io.*;
import java.util.*;
public class TestClass
{
   static void isBinaryOrNot(int number)
   {
     int bin = 1 ;
     int rem;
     int num1 = number;
      while(num1>0)
      {
          rem = num1%10;
          
          if(rem>1)
          {
              bin = 0;
              break;
          }
          else
           num1 /=10;
      }   
    if(bin==0)
    {
        System.out.println(number + " is not a binary number");
    }
    else
    System.out.println(number +" is a binary number");
        
 }


	 public static void main(String[] args) 
     { 
     Scanner s = new Scanner(System.in);
     int num = s.nextInt();
     isBinaryOrNot(num);
	
		
	 }
}

========================================================

Q. 57: Manipulation in numbers using Static Method
QUESTION DESCRIPTION

Write a java program to find the largest number "L" less than a given number "N" which should not contain a given digit "D".

For example, If 145 is the given number and 4 is the given digit, then you should find the largest number less than 145 such that it should not contain 4 in it.

In this case, 139 will be the answer.

Mandatory:

Use the following conditions in the program:

1. Create a class "Sample" and two static methods as follows

2. Method 1 - Create a static method "getInput()" of void type with no argument

a. Method name = getInput()
b. Arguments = no argument
c. Access Specifier = static
d. Method return type = void
e. Use = Get two integer inputs and call the static method "getLLessThanN(num,digit)"

2. Method 2 - Create a static method "getLLessThanN" of integer type that takes two arguments of type integer

a. Method name = getLLessThanN
b. Arguments = Two (int number, int digit) of type integer.
c. Access Specifier = static
d. Method return type = integer Type
Hint : static int getLLessThanN(int number,int digit)

3. Access the static method getInput() from the main method using class name "Sample"

Syntax:
classname.methodname();

Note: Do not access getLessThanN(num,digit) from the main method, it needs to be accessed only from getInput() method and the argument variable name is "num" and "digit".


=====================================================

code :

import java.util.Scanner;
class Sample
{
  Scanner s = new Scanner(System.in);
       static int num  ;
       static int digit  ;
  
       static void getInput()
       {
       
       }
     static int getLLessThanN(int number,int digit)
    {
        
 
        char c = Integer.toString(digit).charAt(0);
 
        
 
        for (int i = number; i > 0; --i)
        {
            if(Integer.toString(i).indexOf(c) == -1)
            {
                 
 
                return i;
            }
        }
 
        return -1;
   }


}


public class  TestClass
{
    public static void main(String[] args)
    {
        Sample.getInput();
        Scanner s = new Scanner(System.in);
        int num = s.nextInt();
        int digit = s.nextInt();
        System.out.println(Sample.getLLessThanN(num,digit));
 
       
    }
}
===========================================================

Q. 58: Fibonacci sequence with static method
QUESTION DESCRIPTION

The Fibonacci sequence is defined by the following rule. The first 2 values in the sequence are 1, 1. Every subsequent value is the sum of the 2 values preceding it.

Write a Java program that uses both recursive and non recursive functions to print the n th value of the Fibonacci sequence.

Mandatory :

1.Create a new class called "Sample" and two static methods as follows

a. Method name = getInput()
b. Type = void
c. Access specifiers = static
d. Arguments = No argument

a. a. Method name = displayFib()
b. Type = void
c. Access specifiers = static
d. Arguments = No argument

2. Access the methods (getInput() and displayFib()) using classname.methodname

Example: Sample.displayFib()

=======================================================================

code :

import java.util.*;
import java.io.*;
class Sample
{
      static int n, a = 0, b = 1, c = 0;

         
    
     public static void getInput()
    {
      Scanner s = new Scanner(System.in);
         n = s.nextInt(); 
    }
    public static void displayFib()
    {
        for (int i = 1; i <= n; ++i) {
         
        
        if(i == 2) 
        {
            System.out.print(b+" ");
            continue;
        }
        c = a+b;
        a = b;
        b = c;
        
        System.out.print(c+" ");
    }
    }

    
    
}
public class TestClass
{
    
	public static void main(String[] args)
	{
      Sample.getInput();
      Sample.displayFib();
	}
}

===================================================================

Q. 59: SUM of all integers
QUESTION DESCRIPTION

Yesterday, puppy Tuzik learned a magically efficient method to find the sum of the integers from 1 to N.

He denotes it as sum(N). But today, as a true explorer, he defined his own new function: sum(D, N), which means the operation sum applied D times: the first time to N, and each subsequent time to the result of the previous operation.

For example, if D = 2 and N = 3, then sum(2, 3) equals to sum(sum(3)) = sum(1 + 2 + 3) = sum(6) = 21.

Tuzik wants to calculate some values of the sum(D, N) function. Will you help him with that?

Mandatory:

1. Create a new class and a method in the class as follows:

Methodname = sumOfAllIntegers
Argument = None
Access Specifier = public
Return Type = void

2. Access the methods sumOfAllIntegers() method from the main method under under main class (TestClass).

The object-name or instance to access the sumOfAllIntegers is "objname"

==================================================================

code :

 import java.util.*;
 import java.io.*;
 
class sum
{
     public void sumOfAllIntegers()
    {
        Scanner s = new Scanner(System.in);
		 long choice,a,n;
		 choice = s.nextInt();
		  for(int i = 0 ;i<choice;i++)
		   {
		     a=s.nextInt();
		     n=s.nextInt();
		       for(int j= 0 ;j<a;j++)
		     {
		         n=(n*(n+1))/2;
		     }
		      System.out.println(n);
		      
		      
		  }
        
    }
}

public class  TestClass
{
	public static void main(String[] args) 
	{
	  sum objname = new sum();
	  objname.sumOfAllIntegers();
	}
}

====================================================================

Q. 60: Shapes
QUESTION DESCRIPTION

Write a program that computes the amount of paint needed to paint different objects. The hierarchy will consist of a parent class Shape with three derived classes - Sphere, Rectangle, and Cylinder.

For the purposes of this problem, the only attribute a shape will have is a name and the method of interest will be the one that computes the area of the shape (surface area in the case of three-dimensional shapes).

Do the following.

1.Write an abstract class "Shape" with the following properties:

An instance variable "shapeName" of type String
An abstract method area()
A toString method that returns the name of the shape

2. Create a class "sphere" which is a descendant of Shape.
A sphere has a radius and its area (surface area) is given by the formula
4*PI*radius^2

Define similar classes for a rectangle and a cylinder. Both the Rectangle class and the Cylinder class are descendants of the Shape class.

A rectangle is defined by its length and width and its area is length times width.

A cylinder is defined by a radius and height and its area (surface area) is PI*radius^2*height. Define the toString method in a way similar to that for the Sphere class.

3. Create a class "Paint" (which has a "coverage" and a method to compute the amount of paint needed to paint a shape).

Correct the return statement in the amount method so the correct amount will be returned.

Use the fact that the amount of paint needed is the area of the shape divided by the coverage for the paint.

4. Create a class with main method that computes the amount of paint needed to paint various shapes. A paint object has been instantiated.

Add the following to complete the program:

Instantiate the three shape objects:

deck to be a 20 by 35 foot rectangle,

bigBall to be a sphere of radius 15, and

tank to be a cylinder of radius 10 and height 30.

Make the appropriate method calls to assign the correct values to the three amount variables.
You should see polymorphism in action as the amount method computes the amount of paint for various shapes.

=========================================================================================================

code :

import java.io.*;
import java.util.*;
import java.math.*;
public class TestClass {
	 public static void main(String[] args) { 
       Scanner sc= new Scanner(System.in);
       float i = sc.nextFloat();
       Paint objp = new Paint();
       Sphere objs = new Sphere();
       float as =objs.area();
       float ps= objp.paint(as,i);
       
       Rectangle objr = new Rectangle();
       float ar = objr.area();
       float pr = objp.paint(ar,i);
       
       Cylinder objc = new Cylinder();
      float ac = objc.area();
       float pc=objp.paint(ac,i);
       
       System.out.println("Amount for Rectangle of length "+objr.l+" and width "+objr.b+" is "+String.format("%.2f",pr));
       System.out.println("Amount for Sphere of radius "+objs.r+" is "+String.format("%.2f",ps));
       System.out.println("Amount for Cylinder of radius "+objc.r+" and height "+objc.h+" is " +String.format("%.2f",pc));
	}
}
class Paint{
 float p;
   float paint(float j,float ii){
  p = j/ii;
     
     return p;
  }
}
abstract class Shape{
  abstract float area();
}

class Sphere extends Shape
{
  float r = 15;
  float a;
  float area()
  {
   float pi = (float) Math.PI;
    a= 4*pi*r*r;
   // System.out.println("sphere area"+a);
    return a;
  }   
}
class Rectangle extends Shape
{
float l = 20;
float b= 35;
float a;
float area()
{
a= l*b;
return a;
}
}
class Cylinder extends Shape{
float r= 10;
float h = 30;
float pi = (float)Math.PI;
float a;
float area()
{
a = pi*r*r*h;
 
return a;
}
}
===============================================================================






















